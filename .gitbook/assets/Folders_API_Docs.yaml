openapi: 3.0.0
info:
  version: 1.0.0
  title: Folder API
  description: API for managing folders
servers:
  - url: api.decisionrules.io/api
    description: Production server (HTTPS)
paths:
  /folder/:targetNodeId:
    get:
      summary: Get folder structure of a node
      description: Retrieve folder structure either by node ID or by navigating through path. Returns a JSON with a tree like structure containing the descendant folders and rules of the target node.
      parameters:
        - name: targetNodeId
          description: ID of the folder
          in: path
          required: false
          schema:
            type: string
        - name: path
          description: Path of folder names
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderStructure'
        '400':
          description: Bad Request
    post:
      summary: Create folders 
      description: Creates folders under a specified target, moves rules into the new structure by baseId or ruleAlias. Define which folder's structure to update by either inputting it's id as a parameter or by navigating to it using the ?path=/ query parameter. Appends the Folder Structure specified in the request body as a child of the target node.
      parameters:
        - name: targetNodeId
          description: ID of the folder
          in: path
          required: false
          schema:
            type: string
        - name: path
          description: Path of folder names
          in: query
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderStructure'
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
    put:
      summary: Create or overwrite folder structure of a node
      description: Define which folder's structure to overwrite by either inputting it's id as a parameter or by navigating to it using the ?path=/ query parameter. Moves rules into the new structure by baseId or ruleAlias. Overwrites the Folder Structure specified in the request body as a child of the target node.
      parameters:
        - name: targetNodeId
          description: ID of the folder
          in: path
          required: false
          schema:
            type: string
        - name: path
          description: Path of folder names
          in: query
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FolderStructure'
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
    delete:
      summary: Delete a folder and all of its descendants (Including it's rules!)
      description: Delete a folder (Including it's rules) either by node ID or by navigating through path. If you want to delete the contents of the entire space target the 'root' by Id and include the optional query parameter ?deleteAll=true
      parameters:
        - name: targetNodeId
          description: ID of the folder
          in: path
          required: false
          schema:
            type: string
        - name: path
          description: Path of folder names
          in: query
          required: false
          schema:
            type: string
        - name: deleteAll
          description: Confirmation to delete everything in Space
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
  /folder/rename/:targetNodeId:
    patch:
      summary: Rename a folder
      description: Define which folder to rename by either inputting it's id as a parameter or by navigating to it using the ?path=/ query parameter. Set a new name for a Folder in the request body with the "name" attribute.
      parameters:
        - name: targetNodeId
          description: ID of the folder
          in: path
          required: false
          schema:
            type: string
        - name: path
          description: Path of folder names
          in: query
          required: false
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RenameNode'
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
  /folder/move:
    put:
      summary: Move Folders from their current position under a new parent
      description: Moves folders (including descendants) and/or rules under the parent specified by targetId or targetPath attribute in the request body. 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveNode'
      responses:
        '200':
          description: Successful response
        '400':
          description: Bad Request
  /folder/find:
    post:
      summary: Find a folder or rule by attribute
      description: Finds Folders and Rules which satisfy all of the criteria from the request body. Use any of the attributes listed below or their combination to find folders and rules.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FindNode'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FindNodeResponse'
        '400':
          description: Bad Request
components:
  schemas:
    FolderStructure:
      type: object
      properties:
        type:
          type: string
          enum:
            - ROOT
            - FOLDER
            - RULE
        name:
          type: string
        id:
          type: string
        baseId:
          type: string
        version:
          type: number
        children:
          type: array
          items:
            $ref: '#/components/schemas/FolderStructure'
      example:
        type: FOLDER
        name: Example Folder
        children:
          - type: FOLDER
            name: Example Sub-Folder
            id: B456
            children:
              - type: RULE
                name: Sample Table
                baseId: xxx-yyy-zzz
                version: 1
              - type: RULE
                name: Production Table
                ruleAlias: calcuation-rule
    RenameNode:
      type: object
      properties:
        name:
          type: string
      example:
        name: Renamed Folder
    MoveNode:
      type: object
      properties:
        targetId?:
          type: string
        targetPath?:
          type: string
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/MoveNodeItem'
      example:
        targetPath: /customers/BigSpend
        nodes:
          - type: FOLDER
            id: folderId123456
          - type: RULE
            baseId: xxx-yyy-zzz
          - type: RULE
            ruleAlias: important-rule
    MoveNodeItem:
      type: object
      properties:
        type:
          type: string
          enum:
            - FOLDER
            - RULE
        id?:
          type: string
        baseId?:
          type: string
        ruleAlias?:
          type: string
    FindNode:
      type: object
      properties:
        name?:
          type: string
        id?:
          type: string
        baseId?:
          type: string
        ruleAlias?:
          type: string
        ruleType?:
          type: string
          enum:
            - decision-table
            - complex-rule
            - composition
            - decision-tree
        tags?:
          type: array
          items:
            type: string
        ruleState?:
          type: string
          enum:
            - published
            - pending
        type?:
          type: string
          enum:
            - FOLDER
            - RULE
            - ROOT
        version?:
          type: number
      example:
        ruleAlias: production
        ruleState: published
    FindNodeResponse:
      example:
        name: Important table
        baseId: f30df343-e22d-4f39-d40f-ad5c946034f0
        version: 2
        ruleAlias: big-production-table
        ruleType: decision-table
        ruleStatus: published
        type: RULE
        tags: []
        description: Sample Pricing Rule
        parentId: 61a17c3d-2a32-f03a-1c41-64fd4f540d30
        path: /ClientA/production
      
